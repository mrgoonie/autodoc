"""
Additional methods for the DocusaurusFormatterAgent.

This file contains methods that should be added to the DocusaurusFormatterAgent class.
"""

async def _create_homepage(self, output_dir: str, repo_info: Any, rag_results: Dict[str, Any]):
    """Create the homepage for the documentation site.
    
    Args:
        output_dir: Output directory
        repo_info: Repository information
        rag_results: RAG processing results
    """
    # Create src/pages directory
    pages_dir = os.path.join(output_dir, "src", "pages")
    os.makedirs(pages_dir, exist_ok=True)
    
    # Create index.js
    index_path = os.path.join(pages_dir, "index.js")
    
    # Get repo description
    description = repo_info.description if repo_info.description else "Documentation generated by AutoDoc AI"
    
    index_content = f"""import React from 'react';
import clsx from 'clsx';
import Link from '@docusaurus/Link';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import Layout from '@theme/Layout';
import HomepageFeatures from '@site/src/components/HomepageFeatures';

import styles from './index.module.css';

function HomepageHeader() {{
  const {{siteConfig}} = useDocusaurusContext();
  return (
    <header className={{clsx('hero hero--primary', styles.heroBanner)}}>
      <div className="container">
        <h1 className="hero__title">{{siteConfig.title}}</h1>
        <p className="hero__subtitle">{{siteConfig.tagline}}</p>
        <div className={{styles.buttons}}>
          <Link
            className="button button--secondary button--lg"
            to="/docs/intro">
            View Documentation
          </Link>
        </div>
      </div>
    </header>
  );
}}

export default function Home() {{
  const {{siteConfig}} = useDocusaurusContext();
  return (
    <Layout
      title={{`${repo_info.name} Documentation`}}
      description={{description}}>
      <HomepageHeader />
      <main>
        <HomepageFeatures />
      </main>
    </Layout>
  );
}}
"""
    
    with open(index_path, 'w') as f:
        f.write(index_content)
    
    # Create index.module.css
    css_path = os.path.join(pages_dir, "index.module.css")
    
    css_content = """/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

@media screen and (max-width: 996px) {
  .heroBanner {
    padding: 2rem;
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
}
"""
    
    with open(css_path, 'w') as f:
        f.write(css_content)
    
    # Create components directory and HomepageFeatures
    components_dir = os.path.join(output_dir, "src", "components")
    os.makedirs(components_dir, exist_ok=True)
    
    features_path = os.path.join(components_dir, "HomepageFeatures.js")
    
    features_content = f"""import React from 'react';
import clsx from 'clsx';
import styles from './styles.module.css';

const FeatureList = [
  {{
    title: 'Easy to Use',
    description: (
      <>
        Browse through comprehensive documentation that is well-structured and easy to navigate.
      </>
    ),
  }},
  {{
    title: 'Focus on What Matters',
    description: (
      <>
        This documentation helps you understand how the code works so you can focus on making changes.
      </>
    ),
  }},
  {{
    title: 'AI-Generated',
    description: (
      <>
        This documentation was automatically generated by AutoDoc AI from the source code of {repo_info.name}.
      </>
    ),
  }},
];

function Feature({{title, description}}) {{
  return (
    <div className={{clsx('col col--4')}}>
      <div className="text--center padding-horiz--md">
        <h3>{{title}}</h3>
        <p>{{description}}</p>
      </div>
    </div>
  );
}}

export default function HomepageFeatures() {{
  return (
    <section className={{styles.features}}>
      <div className="container">
        <div className="row">
          {{FeatureList.map((props, idx) => (
            <Feature key={{idx}} {{...props}} />
          ))}}
        </div>
      </div>
    </section>
  );
}}
"""
    
    with open(features_path, 'w') as f:
        f.write(features_content)
    
    # Create styles.module.css
    styles_path = os.path.join(components_dir, "styles.module.css")
    
    styles_content = """.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}
"""
    
    with open(styles_path, 'w') as f:
        f.write(styles_content)

async def _create_introduction(
    self, docs_dir: str, repo_info: Any, rag_results: Dict[str, Any], language: str = "en"
) -> Optional[str]:
    """Create the introduction page.
    
    Args:
        docs_dir: Documentation directory
        repo_info: Repository information
        rag_results: RAG processing results
        language: Language for the content ('en' or 'vi')
        
    Returns:
        Optional[str]: Path to the created file or None if creation failed
    """
    try:
        intro_path = os.path.join(docs_dir, "intro.md")
        
        # Get architectural overview for the chosen language
        overview = rag_results.get("architectural_overview", {})
        overview_content = overview.get("vi" if language == "vi" else "en", "")
        
        # Determine which heading to use based on language
        heading = "Giới thiệu" if language == "vi" else "Introduction"
        repo_name = repo_info.name
        
        # Create content with YAML frontmatter
        content = f"""---
sidebar_position: 1
---

# {heading}

{f'Chào mừng đến với tài liệu của {repo_name}.' if language == 'vi' else f'Welcome to the {repo_name} documentation.'}

"""
        
        # Add repository description
        if repo_info.description:
            content += f"\n{repo_info.description}\n\n"
        
        # Add architectural overview if available
        if overview_content:
            content += f"\n## {f'Tổng quan Kiến trúc' if language == 'vi' else 'Architectural Overview'}\n\n"
            content += f"{overview_content}\n\n"
        
        # Add repository information
        repo_info_heading = "Thông tin Kho chứa" if language == "vi" else "Repository Information"
        languages_label = "Ngôn ngữ" if language == "vi" else "Languages"
        branch_label = "Nhánh mặc định" if language == "vi" else "Default Branch"
        
        content += f"\n## {repo_info_heading}\n\n"
        content += f"**URL:** {repo_info.url}\n\n"
        content += f"**{languages_label}:** {', '.join(repo_info.languages)}\n\n"
        content += f"**{branch_label}:** {repo_info.default_branch}\n\n"
        
        # Add navigation info
        nav_heading = "Điều hướng Tài liệu" if language == "vi" else "Documentation Navigation"
        nav_text = (
            "Tài liệu này được tổ chức theo cấu trúc sau:" if language == "vi" 
            else "This documentation is organized as follows:"
        )
        
        content += f"\n## {nav_heading}\n\n"
        content += f"{nav_text}\n\n"
        content += f"- **{f'Kiến trúc' if language == 'vi' else 'Architecture'}**: {f'Tổng quan về kiến trúc hệ thống và các sơ đồ' if language == 'vi' else 'System architecture overview and diagrams'}\n"
        content += f"- **{f'Các Module' if language == 'vi' else 'Modules'}**: {f'Tài liệu chi tiết cho từng module trong hệ thống' if language == 'vi' else 'Detailed documentation for each module in the system'}\n"
        
        # Write content to file
        with open(intro_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return intro_path
        
    except Exception as e:
        self.logger.error(f"Error creating introduction page: {str(e)}")
        return None

async def _create_architecture_page(
    self, docs_dir: str, diagrams: Dict[str, str], rag_results: Dict[str, Any], language: str = "en"
) -> Optional[str]:
    """Create the architecture page with diagrams.
    
    Args:
        docs_dir: Documentation directory
        diagrams: Diagrams generated by the MermaidDiagramAgent
        rag_results: RAG processing results
        language: Language for the content ('en' or 'vi')
        
    Returns:
        Optional[str]: Path to the created file or None if creation failed
    """
    try:
        arch_path = os.path.join(docs_dir, "architecture.md")
        
        # Get architectural overview for the chosen language
        overview = rag_results.get("architectural_overview", {})
        overview_content = overview.get("vi" if language == "vi" else "en", "")
        
        # Determine which heading to use based on language
        heading = "Kiến trúc" if language == "vi" else "Architecture"
        
        # Create content with YAML frontmatter
        content = f"""---
sidebar_position: 2
---

# {heading}

{f'Trang này mô tả kiến trúc tổng thể của hệ thống và các thành phần chính của nó.' if language == 'vi' else 'This page describes the overall architecture of the system and its main components.'}

"""
        
        # Add architectural overview if available
        if overview_content:
            content += f"\n## {f'Tổng quan Kiến trúc' if language == 'vi' else 'Architectural Overview'}\n\n"
            content += f"{overview_content}\n\n"
        
        # Add architectural diagram if available
        arch_diagram = diagrams.get("architecture")
        if arch_diagram:
            content += f"\n## {f'Sơ đồ Kiến trúc' if language == 'vi' else 'Architecture Diagram'}\n\n"
            content += f"{arch_diagram}\n\n"
        
        # Add module dependency diagram if available
        module_diagram = diagrams.get("module_dependencies")
        if module_diagram:
            content += f"\n## {f'Sơ đồ Phụ thuộc Module' if language == 'vi' else 'Module Dependencies'}\n\n"
            content += f"{module_diagram}\n\n"
        
        # Add class diagrams if available
        class_diagrams = {k: v for k, v in diagrams.items() if k.startswith("class_")}
        if class_diagrams:
            content += f"\n## {f'Sơ đồ Lớp' if language == 'vi' else 'Class Diagrams'}\n\n"
            
            for diagram_name, diagram in class_diagrams.items():
                module_name = diagram_name.replace("class_", "")
                content += f"\n### {module_name}\n\n"
                content += f"{diagram}\n\n"
        
        # Write content to file
        with open(arch_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return arch_path
        
    except Exception as e:
        self.logger.error(f"Error creating architecture page: {str(e)}")
        return None

def _group_snippets_by_module(self, snippets: List[CodeSnippet]) -> Dict[str, Dict[str, Any]]:
    """Group snippets by module/file path.
    
    Args:
        snippets: List of code snippets
        
    Returns:
        Dict[str, Dict[str, Any]]: Snippets grouped by module/file path
    """
    modules = {}
    
    for snippet in snippets:
        file_path = snippet.file_path
        
        if file_path not in modules:
            modules[file_path] = {
                "snippets": [],
                "functions": [],
                "classes": [],
                "methods": []
            }
        
        modules[file_path]["snippets"].append(snippet)
        
        if snippet.symbol_type == "function":
            modules[file_path]["functions"].append(snippet)
        elif snippet.symbol_type == "class":
            modules[file_path]["classes"].append(snippet)
        elif snippet.symbol_type == "method":
            modules[file_path]["methods"].append(snippet)
    
    return modules

async def _create_module_page(
    self, docs_dir: str, module_path: str, snippets: List[CodeSnippet], 
    summaries: Dict[str, Dict[str, str]], diagrams: Dict[str, str], 
    rag_results: Dict[str, Any], language: str = "en"
) -> Optional[str]:
    """Create a documentation page for a module.
    
    Args:
        docs_dir: Documentation directory
        module_path: Path to the module
        snippets: Snippets for this module
        summaries: Summaries for all snippets
        diagrams: Diagrams generated by the MermaidDiagramAgent
        rag_results: RAG processing results
        language: Language for the content ('en' or 'vi')
        
    Returns:
        Optional[str]: Path to the created file or None if creation failed
    """
    try:
        # Create directory structure to match module path
        relative_dir = os.path.dirname(module_path)
        module_name = os.path.basename(module_path).replace(".py", "")
        
        # Make the module name more URL-friendly
        safe_module_name = re.sub(r'[^\w\-]', '_', module_name)
        
        # Create the directory if it doesn't exist
        module_doc_dir = os.path.join(docs_dir, "modules", relative_dir)
        os.makedirs(module_doc_dir, exist_ok=True)
        
        # Create the file
        module_file_path = os.path.join(module_doc_dir, f"{safe_module_name}.md")
        
        # Sort snippets by type and name
        module_snippets = [s for s in snippets if s.symbol_type == "module"]
        class_snippets = sorted([s for s in snippets if s.symbol_type == "class"], key=lambda s: s.symbol_name)
        function_snippets = sorted([s for s in snippets if s.symbol_type == "function"], key=lambda s: s.symbol_name)
        method_snippets = sorted([s for s in snippets if s.symbol_type == "method"], key=lambda s: s.symbol_name)
        
        # Get module explanation from RAG results
        module_explanations = rag_results.get("module_explanations", {})
        explanation = None
        
        for path, expl in module_explanations.items():
            if path.endswith(module_path):
                explanation = expl.get("vi" if language == "vi" else "en")
                break
        
        # Create content with YAML frontmatter
        module_title = f"{module_name}.py"
        
        content = f"""---
sidebar_position: 1
---

# {module_title}

"""
        
        # Add module explanation or summary
        if explanation:
            content += f"{explanation}\n\n"
        elif module_snippets and module_snippets[0].id in summaries:
            summary = summaries[module_snippets[0].id]
            content += f"{summary.get('vi' if language == 'vi' else 'en', '')}\n\n"
        
        # Add module docstring if available
        if module_snippets and module_snippets[0].original_docstring:
            content += f"## {f'Tài liệu Module' if language == 'vi' else 'Module Documentation'}\n\n"
            content += f"```python\n{module_snippets[0].original_docstring}\n```\n\n"
        
        # Add class diagram if available
        class_diagram = diagrams.get(f"class_{module_name}")
        if class_diagram:
            content += f"## {f'Sơ đồ Lớp' if language == 'vi' else 'Class Diagram'}\n\n"
            content += f"{class_diagram}\n\n"
        
        # Add classes
        if class_snippets:
            content += f"## {f'Lớp' if language == 'vi' else 'Classes'}\n\n"
            
            for class_snippet in class_snippets:
                # Add class heading
                content += f"### {class_snippet.symbol_name}\n\n"
                
                # Add class summary
                if class_snippet.id in summaries:
                    summary = summaries[class_snippet.id]
                    content += f"{summary.get('vi' if language == 'vi' else 'en', '')}\n\n"
                
                # Add class docstring if available
                if class_snippet.original_docstring:
                    content += f"```python\n{class_snippet.original_docstring}\n```\n\n"
                
                # Add class code
                content += f"#### {f'Mã nguồn' if language == 'vi' else 'Source Code'}\n\n"
                content += f"```python\n{class_snippet.text_content}\n```\n\n"
                
                # Add methods for this class
                class_methods = [m for m in method_snippets if m.symbol_name.startswith(f"{class_snippet.symbol_name}.")]
                if class_methods:
                    content += f"#### {f'Phương thức' if language == 'vi' else 'Methods'}\n\n"
                    
                    for method in class_methods:
                        # Extract method name without class prefix
                        method_name = method.symbol_name.split(".")[-1]
                        
                        content += f"##### {method_name}\n\n"
                        
                        # Add method summary
                        if method.id in summaries:
                            summary = summaries[method.id]
                            content += f"{summary.get('vi' if language == 'vi' else 'en', '')}\n\n"
                        
                        # Add method docstring if available
                        if method.original_docstring:
                            content += f"```python\n{method.original_docstring}\n```\n\n"
                        
                        # Add method code
                        content += f"```python\n{method.text_content}\n```\n\n"
        
        # Add functions
        if function_snippets:
            content += f"## {f'Hàm' if language == 'vi' else 'Functions'}\n\n"
            
            for function_snippet in function_snippets:
                # Add function heading
                content += f"### {function_snippet.symbol_name}\n\n"
                
                # Add function summary
                if function_snippet.id in summaries:
                    summary = summaries[function_snippet.id]
                    content += f"{summary.get('vi' if language == 'vi' else 'en', '')}\n\n"
                
                # Add function docstring if available
                if function_snippet.original_docstring:
                    content += f"```python\n{function_snippet.original_docstring}\n```\n\n"
                
                # Add function flow diagram if available
                flow_diagram = diagrams.get(f"flow_{function_snippet.symbol_name}")
                if flow_diagram:
                    content += f"#### {f'Sơ đồ Luồng' if language == 'vi' else 'Flow Diagram'}\n\n"
                    content += f"{flow_diagram}\n\n"
                
                # Add function code
                content += f"#### {f'Mã nguồn' if language == 'vi' else 'Source Code'}\n\n"
                content += f"```python\n{function_snippet.text_content}\n```\n\n"
        
        # Write content to file
        with open(module_file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Create category.json file
        category_file = os.path.join(module_doc_dir, "_category_.json")
        
        category_content = {
            "label": module_name,
            "position": 1,
            "link": {
                "type": "doc",
                "id": f"modules/{os.path.join(relative_dir, safe_module_name)}"
            }
        }
        
        import json
        with open(category_file, 'w') as f:
            json.dump(category_content, f, indent=2)
        
        return module_file_path
        
    except Exception as e:
        self.logger.error(f"Error creating module page: {str(e)}")
        return None

async def _create_sidebar_config(self, docs_dir: str, module_paths: List[str]):
    """Create sidebar configuration to include module pages.
    
    Args:
        docs_dir: Documentation directory
        module_paths: List of module paths to include in the sidebar
    """
    try:
        # Create modules directory and category file
        modules_dir = os.path.join(docs_dir, "modules")
        os.makedirs(modules_dir, exist_ok=True)
        
        # Create category.json file for modules
        category_file = os.path.join(modules_dir, "_category_.json")
        
        category_content = {
            "label": "Modules",
            "position": 3,
            "collapsed": False
        }
        
        import json
        with open(category_file, 'w') as f:
            json.dump(category_content, f, indent=2)
        
        # For more complex module directories, we've already created appropriate _category_.json files 
        # in the _create_module_page method, so no further action is needed here
        
    except Exception as e:
        self.logger.error(f"Error creating sidebar config: {str(e)}")
        raise
